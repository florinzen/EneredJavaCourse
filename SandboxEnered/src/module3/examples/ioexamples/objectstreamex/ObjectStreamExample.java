package module3.examples.ioexamples.objectstreamex;

import java.io.*;
import java.util.Optional;

public class ObjectStreamExample {
    public static void main(String[] args) {
        Classroom c = new Classroom(3);
        Student s1 = new Student("Doru", 17);
        Student s2 = new Student("Veronica", 18);
        Student s3 = new Student("Marian", 19);
        Student s4 = new Student("Monica", 19);

        c.addStudent(s1);
        c.addStudent(s2);
        c.addStudent(s3);
        c.addStudent(s4);


        //testSerialization(c);

        Optional<Classroom> otherClassroom = testDeserialization();

        if(otherClassroom.isPresent()) {
            Classroom actualClassroom = otherClassroom.get();
            System.out.println(actualClassroom);
        } else {
            System.out.println("Nothing to show");
        }

    }

    private static void testSerialization(Classroom c) {
        // A FileOutputStream is chained to an ObjectOutputStream
        // We do this because we want the raw bytes generated by the ObjectOutputStream to be written to a file
        // This is done via the writeObject method
        // This method iterates over the object's graph and only writes the non-transient and non-static (!!!) values as raw bytes
        try (FileOutputStream fos = new FileOutputStream("test-serialization.obj");
             ObjectOutputStream out = new ObjectOutputStream(fos)) {
            System.out.println("Serializing the object");
            out.writeObject(c);
            System.out.println("Done!");
        } catch (IOException e) {
            System.out.println("Exception occured while serializing object. Exception: " + e);
        }
    }

    // How could we improve this method? Answer: Use Optional!!!
    private static Optional<Classroom> testDeserialization() {
        // To restore an object the same principles apply, but backwards:
        // We chain the ObjectInputStream (Input this time!) to a FileInputStream instance
        // Why? Because we want to restore an object from a file. The file will be read as raw bytes by the readObject method
        // An object instance will be restored from the file, and in order to access all the attributes/methods a cast is needed
        try (FileInputStream fis = new FileInputStream("test-serialization.obj");
             ObjectInputStream in = new ObjectInputStream(fis)) {
            Classroom deserializedClass = (Classroom) in.readObject();
            return Optional.of(deserializedClass);
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Exception occured while deserializing object. Exception: " + e);
        }
        return Optional.empty();
    }

}
